// Generated by CoffeeScript 1.12.7
(function() {
  var convert, runnableVals;

  runnableVals = [];

  convert = function(rawData, valueFunc) {
    var child, j, len, node, ref, subTree;
    node = {
      name: rawData.n,
      value: valueFunc(rawData),
      children: []
    };
    if (!rawData.a) {
      return node;
    }
    ref = rawData.a;
    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      subTree = convert(child, valueFunc);
      if (subTree) {
        node.children.push(subTree);
      }
    }
    return node;
  };

  d3.json("data/profile.json", function(err, data) {
    var allStates, flameGraph, profile, tooltip, unhide;
    allStates = function(node) {
      var j, len, ref, state, value;
      value = 0;
      ref = ['RUNNABLE', 'BLOCKED', 'TIMED_WAITING', 'WAITING'];
      for (j = 0, len = ref.length; j < len; j++) {
        state = ref[j];
        if (!isNaN(node.c[state])) {
          value += node.c[state];
        }
      }
      return value;
    };
    profile = convert(data.profile, allStates);
    tooltip = function(d) {
      return d.name + " <br /><br /> " + d.value + " samples<br /> " + (((d.value / profile.value) * 100).toFixed(2)) + "% of total";
    };
    flameGraph = d3.flameGraph('#d3-flame-graph', profile, true).size([1200, 600]).cellHeight(20).zoomEnabled(true).zoomAction(function(node, event) {
      return console.log(node, event);
    }).tooltip(tooltip).render();
    d3.select('#highlight').on('click', function() {
      var nodes;
      nodes = flameGraph.select(function(d) {
        return /java\.util.*/.test(d.name);
      });
      return nodes.classed("highlight", function(d, i) {
        return !d3.select(this).classed("highlight");
      });
    });
    d3.select('#zoom').on('click', function() {
      var node;
      node = flameGraph.select((function(d) {
        return /CountDownLatch\.await$/.test(d.name);
      }), false)[0];
      return flameGraph.zoom(node);
    });
    unhide = false;
    d3.select('#hide').on('click', function() {
      flameGraph.hide((function(d) {
        return /Unsafe\.park$/.test(d.name) || /Object\.wait$/.test(d.name);
      }), unhide);
      return unhide = !unhide;
    });
    d3.select('#runnable').on('click', function() {
      profile = convert(data.profile, (function(node) {
        if (node.c['RUNNABLE']) {
          return node.c['RUNNABLE'];
        } else {
          return 0;
        }
      }));
      return flameGraph = d3.flameGraph('#d3-flame-graph', profile).size([1200, 600]).cellHeight(20).zoomEnabled(true).zoomAction(function(node, event) {
        return console.log(node, event);
      }).tooltip(tooltip).render();
    });
    return d3.select('#rasta').on('click', function() {
      var rastaMode;
      rastaMode = function(d) {
        var cells, ref, ref1, ref2;
        cells = 600 / 20;
        if ((0 <= (ref = d.depth) && ref < cells / 3)) {
          return '#1E9600';
        }
        if ((cells / 3 <= (ref1 = d.depth) && ref1 < cells * 2 / 3)) {
          return '#FFF200';
        }
        if ((cells * 2 / 3 <= (ref2 = d.depth) && ref2 < cells)) {
          return '#FF0000';
        }
      };
      return flameGraph.color(rastaMode).render();
    });
  });

}).call(this);
